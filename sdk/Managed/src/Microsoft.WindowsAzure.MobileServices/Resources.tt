<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
string className = System.IO.Path.GetFileNameWithoutExtension(Host.TemplateFile);
var resourceFile = XDocument.Load(Host.ResolvePath(className + ".resx"));
var visualStudio = ( this.Host as IServiceProvider ).GetService( typeof( EnvDTE.DTE ) ) as EnvDTE.DTE;

var project = visualStudio.Solution.FindProjectItem( this.Host.TemplateFile ).ContainingProject as EnvDTE.Project;
string strDefaultNamespace = project.Properties.Item( "DefaultNamespace" ).Value.ToString();

string inferedNamespace = System.IO.Path.GetDirectoryName(Host.TemplateFile);
int indexNameSpace = inferedNamespace.IndexOf(strDefaultNamespace); 

if (indexNameSpace > -1)
{
   strDefaultNamespace = inferedNamespace.Substring(indexNameSpace).Replace("\\", ".");
}    

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// <# WriteLine(Host.TemplateFile); #>
// <# WriteLine(inferedNamespace); #>
// <# WriteLine(indexNameSpace.ToString()); #>
//------------------------------------------------------------------------------

namespace <# WriteLine(strDefaultNamespace); #>
{    
    using System;
    using System.Reflection;
    using System.Resources;        
    using System.Collections.Generic;

    /// <summary>
    ///  Resource manager for <# WriteLine(className); #>
    /// </summary>    
    public static class <# Write(className); #>
    {
        <#
var dataNodes = resourceFile.Elements().Elements(XName.Get("data")).ToList();
dataNodes.ForEach(node =>
{
    var key = node.Attribute(XName.Get("name")).Value;
    var keyValue = node.Elements(XName.Get("value")).FirstOrDefault().Value;
    keyValue = keyValue.Split(new [] { '\r', '\n' }).FirstOrDefault();

    if (!key.Contains("."))
        {
#>
        /// <summary>
        ///  Localized value for <# Write(key); #>.
        ///  Default value: '<# Write(keyValue); #>' <# WriteLine(string.Empty); #>
        /// </summary>
        public static string <# Write(key); #> { get { return @"<# Write(keyValue); #>"; } }
<#
        }
});
#>         
    }
}